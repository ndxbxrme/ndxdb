{
  "version": 3,
  "file": "database.js",
  "sourceRoot": "../src/",
  "sources": [
    "database.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\r\n\r\nfs = require 'fs'\r\nalasql = require 'alasql'\r\nrequire('./alasql-patch') alasql\r\nasync = require 'async'\r\nObjectID = require 'bson-objectid'\r\nobjtrans = require 'objtrans'\r\nsettings = require './settings'\r\nstorage = null\r\ns = require('underscore.string')\r\nDeepDiff = require 'deep-diff'\r\n.diff\r\nversion = require('../package.json').version\r\ndatabase = null\r\nndx = {}\r\nsqlCache = {}\r\nsqlCacheSize = 0\r\nresetSqlCache = ->\r\n  sqlCache = {}\r\n  sqlCacheSize = 0\r\nmaintenanceMode = false\r\ncallbacks =\r\n  ready: []\r\n  insert: []\r\n  update: []\r\n  select: []\r\n  delete: []\r\n  preInsert: []\r\n  preUpdate: []\r\n  preSelect: []\r\n  preDelete: []\r\n  selectTransform: []\r\n  restore: []\r\nrestoreDatabase = (data, cb) ->\r\n  for key of data\r\n    if database.tables[key]\r\n      database.exec 'DELETE FROM ' + key\r\n      database.exec 'INSERT INTO ' + key + ' SELECT * FROM ?', [data[key].data]\r\n  syncCallback 'restore', database\r\n  cb?()\r\ngetId = (row) ->\r\n  row[settings.AUTO_ID] or row.id or row._id or row.i\r\ngetIdField = (row) ->\r\n  output = '_id'\r\n  if row[settings.AUTO_ID] then output = settings.AUTO_ID\r\n  else if row.id then output = 'id'\r\n  else if row._id then output = '_id'\r\n  else if row.i then output = 'i'\r\n  output\r\nsyncCallback = (name, obj, cb) ->\r\n  if callbacks[name] and callbacks[name].length\r\n    for callback in callbacks[name]\r\n      callback obj\r\n  cb?()\r\nasyncCallback = (name, obj, cb) ->\r\n  truth = false\r\n  if callbacks[name] and callbacks[name].length\r\n    async.eachSeries callbacks[name], (cbitem, callback) ->\r\n      cbitem obj, (result) ->\r\n        truth = truth or result\r\n        callback()\r\n    , ->\r\n      cb? truth\r\n  else\r\n    cb? true\r\ndeleteKeys = (cb) ->\r\n  console.log 'DELETE KEYS'\r\n  storage.keys null, settings.DATABASE + ':node:', (e, r) ->\r\n    if not e and r and r.Contents\r\n      for key in r.Contents\r\n        console.log 'deleting', key.Key\r\n        storage.del key.Key\r\n    if r.IsTruncated\r\n      process.nextTick ->\r\n        deleteKeys cb\r\n    else\r\n      cb()\r\nreadDiffs = (from, to, out) ->\r\n  diffs = DeepDiff from, to\r\n  out = out or {}\r\n  if diffs\r\n    for dif in diffs\r\n      switch dif.kind\r\n        when 'E', 'N'\r\n          myout = out\r\n          mypath = dif.path.join('.')\r\n          good = true\r\n          if dif.lhs and dif.rhs and typeof(dif.lhs) isnt typeof(dif.rhs)\r\n            if dif.lhs.toString() is dif.rhs.toString()\r\n              good = false\r\n          if good\r\n            myout[mypath] ={}\r\n            myout = myout[mypath]\r\n            myout.from = dif.lhs\r\n            myout.to = dif.rhs\r\n  out\r\ninflate = (from, cb, getFn) ->\r\n  if not getFn\r\n    getFn = storage.get\r\n  storage.keys from, settings.DATABASE + ':node:', (e, r) ->\r\n    if e or not r.Contents\r\n      return console.log 'error', e\r\n    async.eachSeries r.Contents, (key, callback) ->\r\n      key.Key.replace /(.+):(.+):(.+)\\/(.+)(:.+)*/, (all, db, type, table, id, randId) ->\r\n        console.log 'key', db, type, table, id\r\n        if db and table and id and db.substr(db.lastIndexOf('/') + 1) is settings.DATABASE\r\n          getFn key.Key, (e, o) ->\r\n            if e\r\n              return callback()\r\n            idField = getIdField o\r\n            if o[idField]\r\n              database.exec 'DELETE FROM ' + table + ' WHERE ' + idField + '=?', [o[idField]]\r\n              if not o['__!deleteMe!']\r\n                database.exec 'INSERT INTO ' + table + ' VALUES ?', [o]\r\n            return callback()\r\n        else\r\n          callback()\r\n    , ->\r\n      if r.IsTruncated\r\n        inflate r.Contents[r.Contents.length-1].Key, cb\r\n      else\r\n        cb?()\r\nsaveDatabase = (cb, writeStream) ->\r\n  storage.put settings.DATABASE + ':database', database.tables, (e) ->\r\n    maintenanceMode = false\r\n    cb?()\r\n  , false, writeStream\r\nattachDatabase = ->\r\n  maintenanceMode = true\r\n  alasql 'CREATE DATABASE ' + settings.DATABASE\r\n  alasql 'USE ' + settings.DATABASE\r\n  for table in settings.TABLES\r\n    alasql 'CREATE TABLE ' + table\r\n  database = alasql.databases[settings.DATABASE]\r\n  if settings.MAX_SQL_CACHE_SIZE\r\n    alasql.MAXSQLCACHESIZE = settings.MAX_SQL_CACHE_SIZE\r\n  if settings.AWS_OK or settings.LOCAL_STORAGE\r\n    storage.get settings.DATABASE + ':database', (e, o) ->\r\n      if not e and o\r\n        restoreDatabase o, ->\r\n          inflate null, ->\r\n            deleteKeys ->\r\n              saveDatabase ->\r\n                console.log \"ndxdb v#{version} ready\"\r\n                syncCallback 'ready', database\r\n      else\r\n        return upgradeDatabase()\r\n  else\r\n    maintenanceMode = false\r\n    setImmediate ->\r\n      console.log \"ndxdb v#{version} ready\"\r\n      syncCallback 'ready', database\r\nupgradeDatabase = ->\r\n  storage.getOld settings.DATABASE + ':database', (e, o) ->\r\n    if not e and o\r\n      console.log 'upgrading database'\r\n      restoreDatabase o, ->\r\n        inflate null, ->\r\n          deleteKeys ->\r\n            saveDatabase ->\r\n              console.log \"ndxdb v#{version} ready\"\r\n              syncCallback 'ready', database\r\n        , storage.getOld\r\n    else if e is 'ENOENT'\r\n      console.log 'building new database'\r\n      inflate null, ->\r\n        deleteKeys ->\r\n          saveDatabase ->\r\n            console.log \"ndxdb v#{version} ready\"\r\n            syncCallback 'ready', database\r\n    else\r\n      console.log '\\nerror decrypting database.  \\nif you have changed the encryption key and want to save your data use ndx-framework to upgrade the database otherwise delete the data directory and restart the app'\r\nrestoreFromBackup = (readStream) ->\r\n  maintenanceMode = true\r\n  storage.get '', (e, o) ->\r\n    if not e and o\r\n      restoreDatabase o, ->\r\n        deleteKeys ->\r\n          saveDatabase ->\r\n            console.log \"backup restored\"\r\n            syncCallback 'restore', null\r\n  , readStream\r\nexec = (sql, props, notCritical, isServer, cb, changes) ->\r\n  if maintenanceMode\r\n    cb? []\r\n    return []\r\n  hash = (str) ->\r\n    h = 5381\r\n    i = str.length\r\n    while i\r\n      h = (h * 33) ^ str.charCodeAt --i\r\n    h\r\n  hh = hash sql\r\n  ast = sqlCache[hh]\r\n  if not ast\r\n    ast = alasql.parse sql\r\n  if not (ast.statements and ast.statements.length)\r\n    cb? []\r\n    return []\r\n  else\r\n    if sqlCacheSize > database.MAX_SQL_CACHE_SIZE\r\n      resetSqlCache()\r\n    sqlCacheSize++\r\n    sqlCache[hh] = ast\r\n  args = [].slice.call arguments\r\n  args.splice 0, 3\r\n  error = ''\r\n  for statement in ast.statements\r\n    table = ''\r\n    isUpdate = statement instanceof alasql.yy.Update\r\n    isInsert = statement instanceof alasql.yy.Insert\r\n    isDelete = statement instanceof alasql.yy.Delete\r\n    isSelect = statement instanceof alasql.yy.Select\r\n    if statement.into\r\n      table = statement.into.tableid\r\n      isInsert = true\r\n      isSelect = false\r\n    else if statement.table then table = statement.table.tableid\r\n    else if statement.from and statement.from.lenth then table = statement.from[0].tableid\r\n    if settings.AUTO_ID and isInsert\r\n      if Object.prototype.toString.call(props[0]) is '[object Array]'\r\n        for prop in props[0]\r\n          if not prop[settings.AUTO_ID]\r\n            prop[settings.AUTO_ID] = ObjectID.generate()\r\n      else\r\n        if not props[0][settings.AUTO_ID]\r\n          props[0][settings.AUTO_ID] = ObjectID.generate()\r\n    updateIds = []\r\n    if isUpdate\r\n      idWhere = ''\r\n      idProps = []\r\n      if statement.where\r\n        idWhere = ' WHERE ' + statement.where.toString().replace /\\$(\\d+)/g, (all, p) ->\r\n          if props.length > +p\r\n            idProps.push props[+p]\r\n          '?'\r\n      updateIds = database.exec 'SELECT *, \\'' + table + '\\' as ndxtable FROM ' + table + idWhere, idProps\r\n    else if isDelete\r\n      idWhere = ''\r\n      if statement.where\r\n        idWhere = ' WHERE ' + statement.where.toString().replace /\\$(\\d+)/g, '?'\r\n      res = database.exec 'SELECT * FROM ' + table + idWhere, props\r\n      if res and res.length\r\n        async.each res, (r, callback) ->\r\n          delObj =\r\n            '__!deleteMe!': true\r\n          delObj[getIdField(r)] = getId r\r\n          storage.put settings.DATABASE + ':node:' + table + '/' + getId(r), delObj, null, notCritical\r\n          asyncCallback (if isServer then 'serverDelete' else 'delete'), \r\n            op: 'delete'\r\n            id: getId r\r\n            table: table\r\n            obj: delObj\r\n            user: ndx.user\r\n            isServer: isServer\r\n          callback()\r\n    else if isInsert\r\n      if Object.prototype.toString.call(props[0]) is '[object Array]'\r\n        for prop in props[0]\r\n          if settings.AUTO_DATE\r\n            prop.u = new Date().valueOf()\r\n          storage.put settings.DATABASE + ':node:' + table + '/' + getId(prop), prop, null, notCritical\r\n          asyncCallback (if isServer then 'serverInsert' else 'insert'), \r\n            op: 'insert'\r\n            id: getId prop\r\n            table: table\r\n            obj: prop\r\n            args: args\r\n            user: ndx.user\r\n            isServer: isServer\r\n      else\r\n        if settings.AUTO_DATE\r\n          props[0].u = new Date().valueOf();\r\n        storage.put settings.DATABASE + ':node:' + table + '/' + getId(props[0]), props[0], null, notCritical\r\n        asyncCallback (if isServer then 'serverInsert' else 'insert'),\r\n          op: 'insert'\r\n          id: getId props[0]\r\n          table: table\r\n          obj: props[0]\r\n          user: ndx.user\r\n          args: args\r\n          isServer: isServer\r\n  output = database.exec sql, props, cb   \r\n  if updateIds and updateIds.length\r\n    async.each updateIds, (updateId, callback) ->\r\n      if settings.AUTO_DATE\r\n        database.exec 'UPDATE ' + updateId.ndxtable + ' SET u=? WHERE ' + getIdField(updateId) + '=?', [new Date().valueOf(), getId(updateId)]\r\n      res = database.exec 'SELECT * FROM ' + updateId.ndxtable + ' WHERE ' + getIdField(updateId) + '=?', [getId(updateId)]\r\n      if res and res.length\r\n        r = res[0]\r\n        storage.put settings.DATABASE + ':node:' + updateId.ndxtable + '/' + getId(r), r, null, notCritical\r\n        asyncCallback (if isServer then 'serverUpdate' else 'update'),\r\n          op: 'update'\r\n          id: getId r\r\n          table: updateId.ndxtable\r\n          obj: r\r\n          args: args\r\n          changes: changes\r\n          user: ndx.user\r\n          isServer: isServer\r\n      callback()\r\n  if error\r\n    output.error = error\r\n  output\r\nmaxModified = (table, cb) ->\r\n  database.exec 'SELECT MAX(modifiedAt) as maxModified FROM ' + table, null, (result) ->\r\n    maxModified = 0\r\n    if result and result.length\r\n      maxModified = result[0].maxModified or 0\r\n    cb? maxModified\r\nmakeWhere = (whereObj) ->\r\n  if not whereObj or whereObj.sort or whereObj.sortDir or whereObj.pageSize\r\n    return sql: ''\r\n  props = []\r\n  parent = ''\r\n\r\n  parse = (obj, op, comp) ->\r\n    sql = ''\r\n    writeVal = (key, comp) ->\r\n      fullKey = \"#{parent}`#{key}`\".replace /\\./g, '->'\r\n      fullKey = fullKey.replace /->`\\$[a-z]+`$/, ''\r\n      if obj[key] is null\r\n        if key is '$ne' or key is '$neq'\r\n          sql += \" #{op} #{fullKey} IS NOT NULL\"\r\n        else\r\n          sql += \" #{op} #{fullKey} IS NULL\"\r\n      else\r\n        sql += \" #{op} #{fullKey} #{comp} ?\"\r\n        props.push obj[key]\r\n    for key of obj\r\n      if obj.hasOwnProperty key\r\n        if key is '$or'\r\n          orsql = ''\r\n          for thing in obj[key]\r\n            objsql = parse(thing, 'AND', comp).replace /^ AND /, ''\r\n            if / AND | OR /.test(objsql) and objsql.indexOf('(') isnt 0\r\n              objsql = \"(#{objsql})\"\r\n            orsql += ' OR ' + objsql\r\n          sql += \" #{op} (#{orsql})\".replace /\\( OR /g, '('\r\n        else if key is '$and'\r\n          andsql = ''\r\n          for thing in obj[key]\r\n            andsql += parse(thing, 'AND', comp)\r\n          sql += \" #{op} (#{andsql})\".replace /\\( AND /g, '('\r\n        else if key is '$gt'\r\n          writeVal key, '>'\r\n        else if key is '$lt'\r\n          writeVal key, '<'\r\n        else if key is '$gte'\r\n          writeVal key, '>='\r\n        else if key is '$lte'\r\n          writeVal key, '<='\r\n        else if key is '$eq'\r\n          writeVal key, '='\r\n        else if key is '$neq'\r\n          writeVal key, '!='\r\n        else if key is '$ne'\r\n          writeVal key, '!='\r\n        else if key is '$in'\r\n           writeVal key, 'IN'\r\n        else if key is '$nin'\r\n           writeVal key, 'NOT IN'\r\n        else if key is '$like'\r\n          sql += \" #{op} #{parent.replace(/->$/, '')} LIKE '%#{obj[key]}%'\"\r\n          parent = ''\r\n        else if key is '$null'\r\n          sql += \" #{op} #{parent.replace(/->$/, '')} IS NULL\"\r\n          parent = ''\r\n        else if key is '$nnull'\r\n          sql += \" #{op} #{parent.replace(/->$/, '')} IS NOT NULL\"\r\n          parent = ''\r\n        else if key is '$nn'\r\n          sql += \" #{op} #{parent.replace(/->$/, '')} IS NOT NULL\"\r\n          parent = ''\r\n        else if Object::toString.call(obj[key]) is '[object Object]'\r\n          parent += '`' + key + '`->'\r\n          sql += parse(obj[key], op, comp)\r\n        else\r\n          writeVal key, comp\r\n    parent = ''\r\n    sql\r\n  delete whereObj['#']\r\n  sql = parse(whereObj, 'AND', '=').replace(/(^|\\() (AND|OR) /g, '$1')\r\n  {\r\n    sql: sql\r\n    props: props\r\n  }\r\nselect = (table, args, cb, isServer) ->\r\n  new Promise (resolve, reject) ->\r\n    ((user) ->\r\n      asyncCallback (if isServer then 'serverPreSelect' else 'preSelect'), \r\n        op: 'select'\r\n        table: table\r\n        args: args\r\n        user: user\r\n      , (result) ->\r\n        if not result\r\n          resolve []\r\n          return cb? [], 0\r\n        args = args or {}\r\n        where = makeWhere if args.where then args.where else args\r\n        sorting = ''\r\n        if args.sort\r\n          if Object.prototype.toString.call(args.sort) is '[object Object]'\r\n            sorting += ' ORDER BY '\r\n            i = 0\r\n            for key of args.sort\r\n              if i++ > 0\r\n                sorting += ', '\r\n              bit = args.sort[key]\r\n              mykey = key.replace /\\./g, '->'\r\n              if bit is 1 or bit is 'ASC'\r\n                sorting += \"`#{mykey}` ASC\"\r\n              else\r\n                sorting += \"`#{mykey}` DESC\"\r\n          else\r\n            args.sort = args.sort.replace /\\./g, '->'\r\n            sorting += \" ORDER BY `#{args.sort}`\"\r\n            if args.sortDir\r\n              sorting += \" #{args.sortDir}\"\r\n        if where.sql\r\n          where.sql = \" WHERE #{where.sql}\"\r\n        myCb = (output) ->\r\n          asyncCallback (if isServer then 'serverSelect' else 'select'), \r\n            op: 'select'\r\n            table: table\r\n            objs: output\r\n            isServer: isServer\r\n            user: user\r\n          , ->\r\n            total = output.length\r\n            if args.page or args.pageSize\r\n              args.page = args.page or 1\r\n              args.pageSize = args.pageSize or 10\r\n              output = output.splice (args.page - 1) * args.pageSize, args.pageSize\r\n            asyncCallback (if isServer then 'serverSelectTransform' else 'selectTransform'),\r\n              op: 'select'\r\n              transformer: args.transformer\r\n              table: table\r\n              objs: output\r\n              isServer: isServer\r\n              user: user\r\n            , ->\r\n              ndx.user = user\r\n              resolve output\r\n              cb? output, total\r\n        ndx.user = user\r\n        output = exec \"SELECT * FROM #{table}#{where.sql}#{sorting}\", where.props, null, isServer,  myCb\r\n    )(ndx.user)\r\nselectOne = (table, args, cb, isServer) ->\r\n  output = await select table, args, null, isServer\r\n  if output and output.length\r\n    return output[0]\r\n  else\r\n    return null\r\ncount = (table, whereObj, cb, isServer) ->\r\n  where = makeWhere whereObj\r\n  if where.sql\r\n    where.sql = \" WHERE #{where.sql}\"\r\n  res = exec \"SELECT COUNT(*) AS c FROM #{table}#{where.sql}\", where.props, null, isServer, cb\r\n  if res and res.length\r\n    return res[0].c\r\n  0\r\ncleanObj = (obj) ->\r\n  for key of obj\r\n    if key.indexOf('$') is 0 or key is '#' or not obj.hasOwnProperty(key)\r\n      delete obj[key]\r\n  return\r\nupdate = (table, obj, whereObj, cb, isServer) ->\r\n  cleanObj obj\r\n  where = makeWhere whereObj\r\n  if where.sql\r\n    where.sql = \" WHERE #{where.sql}\"\r\n  ((user) ->\r\n    exec \"SELECT * FROM #{table}#{where.sql}\", where.props, null, true, (oldItems) ->\r\n      if oldItems\r\n        async.each oldItems, (oldItem, diffCb) ->\r\n          diffs = readDiffs oldItem, obj\r\n          id = getId oldItem\r\n          asyncCallback (if isServer then 'serverPreUpdate' else 'preUpdate'),\r\n            op: 'update'\r\n            id: id\r\n            table: table\r\n            obj: obj\r\n            oldObj: oldItem\r\n            where: whereObj\r\n            changes: diffs\r\n            user: user\r\n          , (result) ->\r\n            if not result\r\n              return cb? []\r\n            updateSql = []\r\n            updateProps = []\r\n            for key of obj\r\n              if where.props.indexOf(obj[key]) is -1\r\n                updateSql.push \" `#{key}`=? \"\r\n                updateProps.push obj[key]\r\n            updateProps.push id\r\n            ndx.user = user\r\n            exec \"UPDATE #{table} SET #{updateSql.join(',')} WHERE `#{[settings.AUTO_ID]}`= ?\", updateProps, null, isServer, diffCb, diffs\r\n        , ->\r\n          cb? []\r\n      else\r\n        cb? []\r\n  )(ndx.user)\r\ninsert = (table, obj, cb, isServer) ->\r\n  cleanObj obj\r\n  ((user) ->\r\n    asyncCallback (if isServer then 'serverPreInsert' else 'preInsert'),\r\n      op: 'insert'\r\n      table: table\r\n      obj: obj\r\n      user: user\r\n    , (result) ->\r\n      if not result\r\n        return cb? []\r\n      ndx.user = user\r\n      if Object.prototype.toString.call(obj) is '[object Array]'\r\n        exec \"INSERT INTO #{table} SELECT * FROM ?\", [obj], null, isServer, cb\r\n      else\r\n        exec \"INSERT INTO #{table} VALUES ?\", [obj], null, isServer, cb\r\n  )(ndx.user)\r\nupsert = (table, obj, whereObj, cb, isServer) ->\r\n  where = makeWhere whereObj\r\n  if not whereObj and obj[settings.AUTO_ID]\r\n    whereObj = {}\r\n    whereObj[settings.AUTO_ID] = obj[settings.AUTO_ID]\r\n    where = makeWhere whereObj\r\n  if where.sql\r\n    where.sql = \" WHERE #{where.sql}\"\r\n  test = exec \"SELECT * FROM #{table}#{where.sql}\", where.props, null, isServer\r\n  if test and test.length and where.sql\r\n    update table, obj, whereObj, cb, isServer\r\n  else\r\n    insert table, obj, cb, isServer\r\ndel = (table, whereObj, cb, isServer) ->\r\n  where = makeWhere whereObj\r\n  if where.sql\r\n    where.sql = \" WHERE #{where.sql}\"\r\n  ((user) ->\r\n    asyncCallback (if isServer then 'serverPreDelete' else 'preDelete'),\r\n      op: 'delete'\r\n      table: table\r\n      where: whereObj\r\n      user: user\r\n    , (result) ->\r\n      if not result\r\n        cb? []\r\n      ndx.user = user\r\n      exec \"DELETE FROM #{table}#{where.sql}\", where.props, null, isServer, cb\r\n  )(ndx.user)  \r\nconsolidate = ->\r\n  new Promise (resolve, reject) ->\r\n    deleteKeys ->\r\n      saveDatabase resolve\r\nconsolidateCheck = ->\r\n  storage.keys null, settings.DATABASE + ':node:', (e, r) ->\r\n    if r and r.Contents and r.Contents.length > (+settings.CONSOLIDATE_COUNT or 500)\r\n      consolidate()\r\n\r\n\r\nmodule.exports =\r\n  config: (config) ->\r\n    for key of config\r\n      keyU = s(key).underscored().value().toUpperCase()\r\n      settings[keyU] = config[key] or config[keyU] or settings[keyU]\r\n    settings.AWS_BUCKET = settings.AWS_BUCKET or process.env.AWS_BUCKET\r\n    settings.AWS_ID = settings.AWS_ID or process.env.AWS_ID\r\n    settings.AWS_KEY = settings.AWS_KEY or process.env.AWS_KEY\r\n    settings.AWS_OK = settings.AWS_BUCKET and settings.AWS_ID and settings.AWS_KEY\r\n    settings.MAX_SQL_CACHE_SIZE = settings.MAX_SQL_CACHE_SIZE or process.env.MAX_SQL_CACHE_SIZE or 100\r\n    settings.ENCRYPTION_KEY = settings.ENCRYPTION_KEY or process.env.ENCRYPTION_KEY\r\n    settings.ENCRYPTION_ALGORITHM = settings.ENCRYPTION_ALGORITHM or process.env.ENCRYPTION_ALGORITHM\r\n    settings.DO_NOT_ENCRYPT = settings.DO_NOT_ENCRYPT or process.env.DO_NOT_ENCRYPT\r\n    if not settings.AUTO_ID\r\n      settings.AUTO_ID = '_id'\r\n    storage = require('./storage')()\r\n    storage.checkDataDir()\r\n    @\r\n  start: ->\r\n    attachDatabase()\r\n    setInterval consolidateCheck, (+settings.CONSOLIDATE_MINS or 60) * 60 * 1000\r\n    @\r\n  on: (name, callback) ->\r\n    callbacks[name].push callback\r\n    @\r\n  off: (name, callback) ->\r\n    callbacks[name].splice callbacks[name].indexOf(callback), 1\r\n    @\r\n  serverExec: (type, args) ->\r\n    if maintenanceMode\r\n      return []\r\n    idField = getIdField args.obj\r\n    if type is 'update'\r\n      database.exec 'DELETE FROM ' + args.table + ' WHERE ' + idField + '=?', [args.id]\r\n      database.exec 'INSERT INTO ' + args.table + ' VALUES ?', [args.obj]\r\n      storage.put settings.DATABASE + ':node:' + args.table + '/' + args.id, args.obj, null, true\r\n    else if type is 'insert'\r\n      database.exec 'INSERT INTO ' + args.table + ' VALUES ?', [args.obj]\r\n      storage.put settings.DATABASE + ':node:' + args.table + '/' + args.id, args.obj, null, true\r\n    else if type is 'delete'\r\n      database.exec 'DELETE FROM ' + args.table + ' WHERE ' + idField + '=?', [args.id]\r\n      delObj =\r\n        '__!deleteMe!': true\r\n      delObj[idField] = args.id\r\n      storage.put settings.DATABASE + ':node:' + args.table + '/' + args.id, args.obj, null, true\r\n    asyncCallback type, args\r\n  exec: exec\r\n  select: select\r\n  selectOne: selectOne\r\n  count: count\r\n  update: update\r\n  insert: insert\r\n  upsert: upsert\r\n  delete: del\r\n  bindFns: (user) ->\r\n    console.log 'bindFns'\r\n  maxModified: maxModified\r\n  maintenanceOn: ->\r\n    maintenanceMode = true\r\n  maintenanceOff: ->\r\n    maintenanceMode = false\r\n  version: ->\r\n    version\r\n  maintenance: ->\r\n    maintenanceMode\r\n  getDb: ->\r\n    database.tables\r\n  cacheSize: ->\r\n    database.sqlCacheSize\r\n  saveDatabase: saveDatabase\r\n  restoreFromBackup: restoreFromBackup\r\n  consolidate: consolidate\r\n  uploadDatabase: (cb) ->\r\n    deleteKeys ->\r\n      storage.put settings.DATABASE + ':database', database.tables, (e) ->\r\n        if not e\r\n          console.log 'database uploaded'\r\n        cb?()\r\n  resetSqlCache: ->\r\n    database.resetSqlCache()\r\n  setNdx: (_ndx) ->\r\n    ndx = _ndx\r\n    @\r\n  alasql: alasql\r\n  makeSlug: (table, template, data, cb) ->\r\n    slug = s(ndx.fillTemplate(template, data)).prune(30, '').slugify().value()\r\n    if data.slug and data.slug.indexOf(slug) is 0\r\n      return cb true\r\n    testSlug = slug\r\n    outSlug = null\r\n    async.whilst ->\r\n      outSlug is null\r\n    , (callback) =>\r\n      @select table,\r\n        slug: testSlug\r\n      , (results) ->\r\n        if results and results.length\r\n          testSlug = slug + '-' + Math.floor(Math.random() * 9999)\r\n        else\r\n          outSlug = testSlug\r\n        callback null, outSlug\r\n      , true\r\n    , (err, slug) ->\r\n      data.slug = slug\r\n      cb? true"
  ]
}