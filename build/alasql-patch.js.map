{
  "version": 3,
  "file": "alasql-patch.js",
  "sourceRoot": "../src/",
  "sources": [
    "alasql-patch.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "'use strict'\r\n\r\nmodule.exports = (alasql) ->\r\n  alasql.yy.UniOp::toString = ->\r\n    s = undefined\r\n    if @op == '~'\r\n      s = @op + @right.toString()\r\n    if @op == '-'\r\n      s = @op + @right.toString()\r\n    if @op == '+'\r\n      s = @op + @right.toString()\r\n    if @op == '#'\r\n      s = @op + @right.toString()\r\n    if @op == 'NOT'\r\n      s = @op + '(' + @right.toString() + ')'\r\n    # Please avoid === here\r\n    if @op == null\r\n      # jshint ignore:line\r\n      s = '(' + @right.toString() + ')'\r\n    if not s\r\n      s = @right.toString()\r\n    s\r\n  alasql.yy.Select::toString = ->\r\n    s = ''\r\n    if @explain\r\n      s += 'EXPLAIN '\r\n    s += 'SELECT '\r\n    if @modifier\r\n      s += @modifier + ' '\r\n    if @distinct\r\n      s += 'DISTINCT '\r\n    if @top\r\n      s += 'TOP ' + @top.value + ' '\r\n      if @percent\r\n        s += 'PERCENT '\r\n    s += @columns.map((col) ->\r\n      `var s`\r\n      s = col.toString()\r\n      if typeof col.as != 'undefined'\r\n        s += ' AS ' + col.as\r\n      s\r\n    ).join(', ')\r\n    if @from\r\n      s += ' FROM ' + @from.map((f) ->\r\n        ss = f.toString()\r\n        if f.as\r\n          ss += ' AS ' + f.as\r\n        ss\r\n      ).join(',')\r\n    if @joins\r\n      s += @joins.map((jn) ->\r\n        ss = ' '\r\n        if jn.joinmode\r\n          ss += jn.joinmode + ' '\r\n        if jn.table\r\n          ss += 'JOIN ' + jn.table.toString()\r\n        else if jn.select\r\n          ss += 'JOIN (' + jn.select.toString() + ')';\r\n        else if jn instanceof alasql.yy.Apply\r\n          ss += jn.toString()\r\n        else\r\n          throw new Error('Wrong type in JOIN mode')\r\n        if jn.as\r\n          ss += ' AS ' + jn.as\r\n        if jn.using\r\n          ss += ' USING ' + jn.using.toString()\r\n        if jn.on\r\n          ss += ' ON ' + jn.on.toString()\r\n        ss\r\n      )\r\n    if @where\r\n      s += ' WHERE ' + @where.toString()\r\n    if @group and @group.length > 0\r\n      s += ' GROUP BY ' + @group.map((grp) ->\r\n        grp.toString()\r\n      ).join(', ')\r\n    if @having\r\n      s += ' HAVING ' + @having.toString()\r\n    if @order and @order.length > 0\r\n      s += ' ORDER BY ' + @order.map((ord) ->\r\n        ord.toString()\r\n      ).join(', ')\r\n    if @limit\r\n      s += ' LIMIT ' + @limit.value\r\n    if @offset\r\n      s += ' OFFSET ' + @offset.value\r\n    if @union\r\n      s += ' UNION ' + (if @corresponding then 'CORRESPONDING ' else '') + @union.toString()\r\n    if @unionall\r\n      s += ' UNION ALL ' + (if @corresponding then 'CORRESPONDING ' else '') + @unionall.toString()\r\n    if @except\r\n      s += ' EXCEPT ' + (if @corresponding then 'CORRESPONDING ' else '') + @except.toString()\r\n    if @intersect\r\n      s += ' INTERSECT ' + (if @corresponding then 'CORRESPONDING ' else '') + @intersect.toString()\r\n    s"
  ]
}